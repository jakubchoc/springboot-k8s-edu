name: CI/CD
on:
  push:
    branches:
      - production

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build and run tests
        run: mvn clean test

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build and install
        run: mvn clean install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  

      - name: Build Docker image for multiple platforms
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.YOUR_APP }}:latest . --push

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker images
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.YOUR_APP }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.YOUR_APP }}:latest  

  deploy:
    name: Deploy
    needs: [ test, build ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Kubernetes config
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          export KUBECONFIG=$HOME/.kube/config

      - name: Test Kubernetes Connection
        run: |
          kubectl get nodes

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/metallb-config.yaml
          kubectl apply -f k8s/deployment.yml
          kubectl apply -f k8s/service.yml
